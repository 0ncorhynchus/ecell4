#! /usr/bin/env python
# encoding: utf-8

from waflib.Tools import waf_unit_test
from waflib import Logs


top = '.'
out = 'build'

hppfiles = [
    'CompartmentSpace.hpp', 'exceptions.hpp', 'Identifier.hpp',
    'Journal.hpp', 'linear_algebra.hpp', 'Model.hpp', 'NetworkModel.hpp',
    'Particle.hpp', 'ParticleSpace.hpp', 'Position3.hpp',
    'RandomNumberGenerator.hpp', 'ReactionRule.hpp', 'SerialIDGenerator.hpp',
    'Simulator.hpp', 'Space.hpp', 'Species.hpp', 'functions.hpp', 'types.hpp',
    'get_mapper_mf.hpp'
    ]

cppfiles = [
    'Journal.cpp', 'Species.cpp', 'ParticleSpace.cpp',
    'CompartmentSpace.cpp', 'NetworkModel.cpp', 'Position3.cpp'
    ]

def options(opt):
    # opt.add_option(
    #     '--unit-test', action='store_true', default=False, help='unit test')
    opt.load('compiler_cxx')

def configure(conf):
    conf.load('compiler_cxx')
    conf.check_cfg(
        package='gsl', uselib_store='gsl', atleat_version='1.13',
        args='--cflags --libs')
    # conf.env.unit_test = conf.options.unit_test

def summary(bld):
    '''borrowed from waf demos/unit_test/wscript
    '''
    lst = getattr(bld, 'utest_results', [])
    if lst:
        total = len(lst)
        tfail = len([x for x in lst if x[1]])

    val = 100 * (total - tfail) / (1.0 * total)
    Logs.pprint('CYAN', 'test report %3.0f%% success' % val)

    Logs.pprint('CYAN', '  tests that fail %d/%d' % (tfail, total))
    for (f, code, out, err) in lst:
        if code:
            Logs.pprint('CYAN', '    %s' % f)
            Logs.pprint('RED', 'status: %r' % code)
            if out: Logs.pprint('RED', 'out: %r' % out)
            if err: Logs.pprint('RED', 'err: %r' % err)

def build(bld):
    bld.install_files(
        '${PREFIX}/include/ecell4/core', hppfiles)
    bld.shlib(
        source = cppfiles,
        includes = ['.'],
        lib = ['gsl', 'gslcblas', 'm'],
        target = 'ecell4-core')

    bld.recurse('tests')

    # bld.add_post_fun(waf_unit_test.summary)
    bld.add_post_fun(summary)
    bld.options.all_tests = True
