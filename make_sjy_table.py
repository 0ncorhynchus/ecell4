import numpy
import scipy.special as special

import string


def maxz( n ):

    z = n * n + n + 1 * 2e4

    if z >= 1000:
        z = max( 1000, n * n )

    z *= 1.01

    return z


def jnyn( n, resolution ):

    delta = numpy.pi / resolution
    zTable = numpy.mgrid[delta:maxz(n):delta]

    jTable = numpy.zeros( ( len( zTable ), n+1 ) )
    yTable = numpy.zeros( ( len( zTable ), n+1 ) )
    for i, z in enumerate( zTable ):
        jTable[i], _, yTable[i], _ = special.sph_jnyn( n, z )

    jTable = jTable.transpose()
    yTable = yTable.transpose()
    return zTable, jTable, yTable

def make_table( func, n, z0, tol ):

    max_z = maxz( n )
    z = z0

    dz = numpy.pi / 100

    j, jp = func( n, z )
    j_prev = j[n]
    jp_prev = jp[n]

    zTable = numpy.array( [z,] )
    yTable = numpy.array( [j[n],] )

    while z < max_z:
        j, jp = func( n, z + dz )
        abs_jpp_norm = abs( ( jp[n] - jp_prev ) * dz )

        if abs_jpp_norm > tol:# or abs( j[n] - j_prev ) > tol:
            dz *= .5
            continue 

        z += dz

        zTable = numpy.append( zTable, z )
        yTable = numpy.append( yTable, j[n] )

        if abs_jpp_norm < tol / 2:
            dz *= 2

        jp_prev = jp[n]
        j_prev = j[n]

        #print z, yTable[-1]

    print n, len( zTable )
    assert len( zTable ) == len( yTable )

    return zTable, yTable


def writeHeader( file ):

    template = '''

/* Auto-generated by a script.  Don't edit */

namespace sb_table
{

struct Table
{
    const unsigned int N;
    const double* const x;
    const double* const y;
};
'''

    file.write( template )

def writeFooter( file ):

    template = '''
}  // namespace sbjy_table
'''

    file.write( template )

def writeTableArray( file, name, N ):

    file.write( 'static const unsigned int %s_max( %d );\n' % ( name, N ) ) 
    file.write( 'static const Table* %s[%d + 1] =\n{\n' % ( name, N ) ) 
    #file.write( 'boost::array<const double**, %d + 1>%s =\n{\n' % ( N, name ) ) 

    for n in range( N+1 ):
        file.write( '    &%s%d,\n' % ( name, n ) )

    file.write( '};\n\n' )


def writeArray( file, name, table ):

    #    head_template = '''
    #static const double %s[2][%d + 1] =
    #{\n'''

    head_template = '''
static const double %s_array[%d + 1] =
{\n'''

    #array_template = '''{\n%s\n}'''
    number_template = '''    %.18f'''
    foot_template = '''};\n'''

    N = len( table )

    file.write( head_template % ( name, N ) )

    #file.write( '    {\n' )
    file.write( ',\n'.join( number_template % n for n in table ) )
    #file.write( '    },\n' )

    file.write( foot_template )


    struct_template = '''
static const Table %s = { %d, %s, %s_array };

'''

    file.write( struct_template % ( name, N, 'z_array', name ) )



if __name__ == '__main__':

    import sys

    filename = sys.argv[1]

    file = open( filename, 'w' )

    maxn = 41
    tolerance = 1e-5

    writeHeader( file )

    zTable, jTable, yTable = jnyn( maxn, 70 )
    writeArray( file, 'z' , zTable )

    for n in range( maxn+1 ):
        print n

        #zTable, jTable = make_table( special.sph_jn, n, n+1, tolerance )
        #writeArray( file, 'sj_table%d' % n, zTable, jTable )
        #writeArray( file, 'sj_table%d' % n, zTable, jTable[n] )

        i = numpy.searchsorted( zTable, maxz( n ) )
        writeArray( file, 'sj_table%d' % n, jTable[n][:i] )

        #zTable, yTable = make_table( special.sph_yn, n, n+1, tolerance )
        #writeArray( file, 'sy_table%d' % n, zTable, yTable )
        #writeArray( file, 'sy_table%d' % n, zTable, yTable[n] )
        #i = numpy.searchsorted( yTable[n], maxz( n ) )
        writeArray( file, 'sy_table%d' % n, yTable[n][:i] )

    writeTableArray( file, 'sj_table', maxn )
    writeTableArray( file, 'sy_table', maxn )

    writeFooter( file )

    file.write( '\n' )

    file.close()

