#! /usr/bin/env python
# encoding: utf-8
#
# Build script for Gillespie Solver (draft)
# vim: syntax=python 
# #
top = '.'
out = 'build'

from waflib.Tools import waf_unit_test
from waflib import Logs

# Header files which this module requires.
header_list = ['vector', 'map', 'numeric']

hppfiles = [
	'GillespieWorld.hpp', 'GillespieSimulator.hpp'
	]

cppfiles = [
	'GillespieWorld.cpp', 'GillespieSimulator.cpp', #'serialize.cpp', 
	]

def options(opt):
	opt.add_option('--enable_debug', action='store_true', default=False, help='debug')
	opt.load('compiler_cxx boost')

def configure(conf):
	conf.load('compiler_cxx boost')

	conf.check_cfg(package='gsl', uselib_store='gsl', atleat_version='1.13', args='--cflags --libs')
	#conf.check_cfg(package='pficommon', uselib_store='pficommon', atleat_version='1.0.0', args='--cflags --libs')

	# Checking the existence of header files.
	for header in header_list:
		conf.check(header_name = header, features = 'c cprogram')

	# Save option flags.
	conf.env.enable_debug =  conf.options.enable_debug

	conf.env.append_unique(
		'CXXFLAGS', 
		['-Wall', '-g']
		)

def summary(bld):
    '''borrowd from waf demos/unit_test/wscript
    '''
    lst = getattr(bld, 'utest_results', [])
    if lst:
        total = len(lst)
        tfail = len([x for x in lst if x[1]])

        val = 100 * (total - tfail) / (1.0 * total)
        Logs.pprint('CYAN', 'test report %3.0f%% success' % val)

        Logs.pprint('CYAN', '  tests that fail %d/%d' % (tfail, total))
        for(f, code, out, err) in lst:
            if code:
                Logs.pprint('CYAN', '   %s' % f)
                Logs.pprint('RED', 'status: %r' % code)
                if out: Logs.pprint('RED', 'out: %r' % out)
                if err: Logs.pprint('RED', 'err: %r' % err)
	

def build(bld):
    # always build libgillespie.so or .dylib(mac)
    #bld.shlib(
    #	source = ['./GillespieSolver.cpp', './GillespieWorld.cpp', './serialize.cpp'],
    #	includes = ['.'],
    #	uselib = ['gsl', 'pficommon'],
    #	target = 'gillespie'
    #)

    bld.install_files(
	'${PREFIX}/include/ecell4/gillespie', hppfiles)

    bld.shlib(
	source = cppfiles,
	lib = ['gslcblas', 'gsl', 'm', 'ecell4-core'],
	target = 'ecell4-gillespie')

    bld.recurse('tests')
    #bld.add_post_fun(summary)

    if bld.cmd == 'install':
        import platform
        if platform.system() == 'Darwin':
            import os
            bld_lib_dir = bld.path.get_bld().abspath() + '/' 
            bld_lib_path = bld_lib_dir + 'libecell4-gillespie.dylib'
            dest_lib_dir = bld.env['LIBDIR'] + '/'             
            dest_lib_path = dest_lib_dir + 'libecell4-gillespie.dylib'

            ins_name_toos_cmdline = "install_name_tool -id " + dest_lib_path + ' ' + bld_lib_path
            os.system(ins_name_toos_cmdline)
