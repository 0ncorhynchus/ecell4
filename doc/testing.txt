
How to test EPDP code
===========================

1. make check

1. Run dimer.py
   
   * Make sure PROFMODE is set to True in the last part of dimer.py.

   ::

     % cd topdir
     % python dimer.py


1. Radial distribution function test

   1. Enter samples/irreversible.

   1. Run the following set of scripts::
        
        LOGLEVEL=ERROR PYTHONPATH=../.. python -O run.py rev.3.out 1.25e-2 5000000 &
        LOGLEVEL=ERROR PYTHONPATH=../.. python -O run.py rev.2.out 1.25e-3 4000000 &
        LOGLEVEL=ERROR PYTHONPATH=../.. python -O run.py rev.1.out 1.25e-4 2000000 &
        LOGLEVEL=ERROR PYTHONPATH=../.. python -O run.py rev.0.out 1.25e-5 2000000 &
        LOGLEVEL=ERROR PYTHONPATH=../.. python -O run.py rev.-1.out 1.25e-6 2000000 &
        LOGLEVEL=ERROR PYTHONPATH=../.. python -O run.py rev.-2.out 1.25e-7 2000000 &
        LOGLEVEL=ERROR PYTHONPATH=../.. python -O run.py rev.-3.out 1.25e-8 1000000 &

   1. This will take a while.  When all is done, run the following and
      visually verify that the simulation results coincide with the
      analytical solution::

        PYTHONPATH=../.. python plot.py irr.-3.out 0.0000000125 irr.-2.out 0.000000125  irr.-1.out 0.00000125  irr.0.out 0.0000125 irr.1.out 0.000125 irr.2.out 0.00125 irr.3.out 0.0125
 
   1. Run similar for samples/reversible::

        LOGLEVEL=ERROR PYTHONPATH=../.. python -O run.py rev.3.out 1.25e-2 5000000 &
        LOGLEVEL=ERROR PYTHONPATH=../.. python -O run.py rev.2.out 1.25e-3 4000000 &
        LOGLEVEL=ERROR PYTHONPATH=../.. python -O run.py rev.1.out 1.25e-4 2000000 &
        LOGLEVEL=ERROR PYTHONPATH=../.. python -O run.py rev.0.out 1.25e-5 2000000 &
        LOGLEVEL=ERROR PYTHONPATH=../.. python -O run.py rev.-1.out 1.25e-6 2000000 &
        LOGLEVEL=ERROR PYTHONPATH=../.. python -O run.py rev.-2.out 1.25e-7 2000000 &
        LOGLEVEL=ERROR PYTHONPATH=../.. python -O run.py rev.-3.out 1.25e-8 1000000 &

    1. Unlike the irreversible case, the reversible case needs a Mathematica
       program to obtain the analytical solutions.  To run Mathematica,
       run make_p_rev_files.py.


    1. Plot and visually check the result::

         PYTHONPATH=../.. python plot.py rev.-3.out p_rev.-3.tsv 0.0000000125 rev.-2.out p_rev.-2.tsv 0.000000125 rev.-1.out p_rev.-1.tsv 0.00000125 rev.0.out p_rev.0.tsv 0.0000125 rev.1.out p_rev.1.tsv 0.000125 rev.2.out p_rev.2.tsv 0.00125 rev.3.out p_rev.3.tsv 0.0125


1. Hardbody benchmark test.   

    Here we check if the simulator performss ok for different
    concentration ranges, but without reactions.

   ::

     % cd samples/hardbody
     % PYTHONPATH=../.. python -O run_all.py out.py

   Then, plot the result::

     % python plot.py

   Check if the constant concentration case scales linearly for the
   number of particles, the constant volume case scale according to 
   N^(5/3) for up to about uM range, and it scales N^(2/3) for the
   changing concentration case (inset).
   

1. Systems with chemical reactions nor different diffusion rates are
   not well tested yet.   To test them, run mapk and pushpull...  
   (more tests follow...)




   
